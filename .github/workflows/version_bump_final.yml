name: Auto-increment Version Tag

on:
  pull_request:
    types:
      - closed
    

jobs:
  bump_version:
    runs-on: ubuntu-latest
    if: ${{github.event.pull_request.merged == true}}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get Latest Version
      id: latest_version
      run: |-
        release="${GITHUB_REF#refs/heads/release/}"
        git fetch --tags  # Fetch all tags from the remote repository
        latest_version=$(git tag --list --sort=-v:refname | head -n 1)
        echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV
        echo "Latest version: $latest_version"
      continue-on-error: true
    
    - name: Get the release type
      id: extraction
      uses: sandbox/.github/actions/name@feature


    - name: Debug name 
      shell: bash
      run: |-
        echo "Release Tag cant be extracted or is missing"
        exit 1

    - name: Determine New Version
      id: determine_version
      shell: bash
      run: |
        echo "Latest version: ${LATEST_VERSION}"
        IFS='.' read -ra my_array <<< "${LATEST_VERSION}"
        
        major="${my_array[0]}"
        minor="${my_array[1]}"
        patch="${my_array[2]}"
        config="${my_array[3]}"

        # Convert component strings to integers
        major=$((major))
        minor=$((minor))
        patch=$((patch))
        config=$((config))

        case ${{inputs.release_type}} in
          "major")
            major=$((major+1))
            minor=0
            patch=0
            config=0
            ;;
          "minor")
            minor=$((minor+1))
            patch=0
            config=0
            ;;
          "patch")
            patch=$((patch+1))
            config=0
            ;;
          "config")
            config=$((config+1))
            ;;
          *)
            echo "Not applicable"
            ;;
        esac

        new_version="${major}.${minor}.${patch}.${config}"
        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV       
        echo "New version: $new_version"
      continue-on-error: true

    - name: Update Git Release Tag
      run: |-
        release="${GITHUB_REF#refs/heads/release/}"
        NEW_VERSION=${{env.NEW_VERSION}}
        echo "New version: ${{env.NEW_VERSION}}"
        GITHUB_OWNER=${{ github.repository_owner }}
        GITHUB_REPO=${{ github.event.repository.name }}
    
        # Create a new release using GitHub REST API
        curl -k -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{secrets.TOKEN}}" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/git/refs \
          -d '{"ref":"refs/tags/'"${NEW_VERSION}"'","sha":"'"${{github.sha}}"'"}' 







